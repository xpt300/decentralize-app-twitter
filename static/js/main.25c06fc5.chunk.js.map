{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","inputFocus","setInputFocus","currentAccount","setCurrentAccount","message","setMessage","allWaves","setAllWaves","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","on","from","prevState","useEffect","className","onClick","href","rows","placeholder","onFocus","onBlur","style","borderColor","value","onChange","target","color","disabled","marginTop","padding","map","index","key","slice","substr","moment","toString","format","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25c06fc5.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json'\nimport moment from 'moment';\n\nexport default function App() {\n  const [inputFocus, setInputFocus] = useState(false)\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n\n  const contractABI = abi.abi;\n\n  const contractAddress = \"0x183361c097b7F086996f0aaCACBF4265BD82dD4F\";\n\n  const checkIfWalletIsConnected = async () => {\n\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        getAllWaves()\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n    /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave(message, { gasLimit: 300000 })\n        setMessage(\"\")\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n}\n\nconst getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n        \n\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n\n\n                /**\n         * Listen in for emitter events!\n         */\n        wavePortalContract.on(\"NewWave\", (from, timestamp, message) => {\n          console.log(\"NewWave\", from, timestamp, message);\n\n          setAllWaves(prevState => [...prevState, {\n            address: from,\n            timestamp: new Date(timestamp * 1000),\n            message: message\n          }]);\n        });\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  console.log(currentAccount)\n\n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n\n      {!currentAccount ? \n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connecter votre Wallet\n          </button>\n          : <div className='connected'>Vous êtes connectés</div>\n        }\n        <div className=\"header\">\n          Envoyer un message sur le réseau Rinkeby\n        </div>\n\n        <div className=\"bio\">\n         Envoyer un message publique à <a href=\"https://github.com/xpt300\" className=\"link\">Maxime</a>. Ceci est une app de test pour apprendre à créer un \"smart contract\".\n        </div>\n\n         <textarea rows=\"4\"\n         className=\"textArea\"\n         placeholder=\"Ton message\"\n         onFocus={() => setInputFocus(true)}\n         onBlur={() => setInputFocus(false)}\n         style={{borderColor: inputFocus && message.length > 280 ? '#F32013' : inputFocus ? '#63b3ed' : 'white'}}\n          value={message}\n          onChange={(message) => setMessage(message.target.value)}\n        />\n        <div className=\"boxLength\">\n          <p className=\"length\"><span style={{color: message.length <= 280 ? \"white\" : \"#F32013\"}}>{message.length}</span> / 280</p>\n        </div>\n\n        <button className={message.length > 280 || message.length === 0 ? \"disabledSendButton\" : \"sendButton\"} onClick={wave} disabled={message.length > 280 || message.length === 0}>\n          Send\n        </button>\n\n            <div className=\"table\" style={{ marginTop: \"16px\", padding: \"8px\" }}>\n              <div className=\"tableHeading\">WALLET</div>\n              <div className=\"tableHeading\">MESSAGE</div>\n              <div className=\"tableHeading\">DATE</div>\n        {allWaves.map((wave, index) => {\n          return (\n            <Fragment key={index}>\n                <div className=\"tableMessage\">{wave.address.slice(0, 4)}...{wave.address.substr(wave.address.length - 2)}</div>\n                <div className=\"tableMessage\">{wave.message}</div>\n                <div className=\"tableMessage\">{moment(wave.timestamp.toString()).format('MM/DD/YYYY, HH:mm:ss')}</div>\n            </Fragment>\n          )\n        })}\n    </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}